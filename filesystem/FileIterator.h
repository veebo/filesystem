#include <fstream>
#include "FileDescriptor.h"


// Пример использования итератора есть в функции stub (commands_ns.cpp)
// Изначально (при создании) текущий файл не определен, т.е. для доступа
// к первому дескриптору, нужно предварительно вызвать функцию Next() (см. пример)
class FileIterator
{

	friend class FileSystem;
public:
	~FileIterator();
	void Close(); //Закрытие итератора
	void Delete(); //Удаление текущего файла в системе
	void Next(); // Переход к следующему файлу
	bool HasNext();	// Есть ли следующий файл?
	int GetNextIndex(); 
	FileDescriptor* GetFileDescriptor(); //Получить дескриптор текущего файла
										 //!!! При работе с итератором, нужно не забывать удалять файловые дескрипторы
										 //  через оператор delete после их использования, т.к. сам итератор за это не отвечает
	void SetFileDescriptor(FileDescriptor* new_fd); //Установить для текущего файла заданный дескриптор
	void set_next(int index); //Установка индекса следующего за данным файла

private:
	FileSystem* fs; //Указатель на экземпляр файловой системы
	std::fstream* fp; //Указатель на поток файла fs.txt (!!! Данный указатель и тот, что находится
					  //в файловой системе (fs->fp) являются разными и могут в один момент времени
					  // указывать на разные позиции в физическом файле.

	FileDescriptor* current; //Дескриптор текущего файла
	int next; //Индекс, следующего по списку файла. Индекс начинается с нуля и является порядковым
			  // номером дескриптора файла в файле fs.txt.

	FileIterator(FileSystem* fs, std::fstream* fp); //Конструктор прайват, т.к. создаваться может только
													// через экземпляр файловой системы
	void read_fd(); //Получение дескриптора из файла
	
};
